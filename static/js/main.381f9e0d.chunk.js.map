{"version":3,"sources":["LineChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LineChart","labels","xdata","data","datasets","label","slice","fill","backgroundColor","pointBorderWidth","borderWidth","borderColor","options","elements","point","radius","scales","yAxes","ticks","beginAtZero","type","S","require","row","d","y_pred","y_pred_std","aqi","errors","xlabels","App","useState","city","setCity","setAqi","stripAccents","latinise","s","toLowerCase","useEffect","csv","then","forEach","push","getHistoricData","getPredictionData","url","fetch","response","status","json","results","value","console","log","catch","err","fetchCity","className","onChange","option","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA2DeA,EArDkE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAoBlFC,EAAkB,CACpBF,OAAQA,EACRG,SAAU,CACN,CACIC,MAAO,UACPF,KAAMD,EAAMI,MAAM,EAAE,IACpBC,MAAM,EACNC,gBAAiB,iBACjBC,iBAAkB,GAClBC,YAAa,EACbC,YAAa,wBAEjB,CACIN,MAAO,cACPF,KAAMD,EACNK,MAAM,EACNE,iBAAkB,GAClBD,gBAAiB,qBACjBG,YAAa,8BAKzB,OACI,8BACI,cAAC,IAAD,CAAMR,KAAMA,EAAMS,QA3CI,CAC1BC,SAAS,CACLC,MAAM,CACFC,OAAO,IAGfC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHC,aAAa,OAiCWC,KAAM,YC9ClDC,EAAIC,EAAQ,KAEVC,EAAM,SAACC,GAKX,OAJAA,EAAEC,QAAUD,EAAEC,OACdD,EAAEE,YAAcF,EAAEE,WAClBF,EAAEG,KAAOH,EAAEG,IACXH,EAAEI,QAAUJ,EAAEI,OACPJ,GAILtB,EAAyB,GACzB2B,EAA2B,GA0GhBC,EAxGO,WAAO,IAAD,EAEFC,mBAAiB,YAFf,mBAEnBC,EAFmB,KAEbC,EAFa,OAGJF,mBAAiB,GAHb,mBAGnBJ,EAHmB,KAGdO,EAHc,KA4CpBC,EAAe,SAACH,GACpB,OAAOX,EAAEW,GAAMI,WAAWC,EAAEC,eA8BhC,OATAC,qBAAU,WACRV,EAAU,GACV3B,EAAQ,GAvDgB,SAAC8B,GAAiBQ,YAAI,gHAAD,OAAiHR,EAAjH,QAA6HT,GAAKkB,MAC7K,SAACtC,GACCA,EAAKuC,SAAQ,SAACnB,GAAD,OAASM,EAAQc,KAAKpB,EAAI,QACvCpB,EAAKuC,SAAQ,SAACnB,GAAD,OAASrB,EAAMyC,KAAKpB,EAAG,WAqDxCqB,CAAgBT,EAAaH,IAhEH,SAACA,GAAiBQ,YAAI,6GAAD,OAA8GR,EAA9G,QAA0HT,GAAKkB,MAC5K,SAACtC,GAECA,EAAKuC,SAAQ,SAACnB,GAAD,OAASM,EAAQc,KAAKpB,EAAI,QACvCpB,EAAKuC,SAAQ,SAACnB,GAAD,OAASrB,EAAMyC,KAAKpB,EAAG,cA6DxCsB,CAAkBV,EAAaH,IAlDb,SAACA,GACjB,IAAMc,EAAG,sDAAkDd,EAAlD,mBACTe,MAAMD,GACHL,MACC,SAAUO,GACgB,MAApBA,EAASC,OAMbD,EAASE,OAAOT,MAAK,SAAUtC,GAE7B+B,EAAO/B,EAAKgD,QAAQ,GAAGC,UAPvBC,QAAQC,IAAI,gDACVN,EAASC,WAUhBM,OAAM,SAAUC,GACfH,QAAQC,IAAI,kBAAmBE,MAiCrCC,CAAUzB,KACT,CAACA,IAIF,sBAAK0B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mDAIA,sBAAKA,UAAU,YAAf,UACE,gDACA,yBAAQC,SAAU,SAACC,GAAD,OAAY3B,EAAQ2B,EAAOC,OAAOT,QAApD,UACE,8CACA,oDACA,8CACA,iDACA,kDAGF,cAAC,EAAD,CAAWnD,OAAQ4B,EAAS3B,MAAOA,IACnC,yDACA,4BAAIyB,IA7CJA,EAAM,GACD,6CAEAA,EAAM,IAAMA,EAAM,IAClB,6CAEAA,EAAM,KAAOA,EAAM,IACnB,6CAEAA,EAAM,IACN,kDADJ,KAuCH,qBAAK+B,UAAU,kBCtGNI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.381f9e0d.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from '@reactchartjs/react-chart.js';\nimport { ChartOptions, ChartData } from 'chart.js'\n\n\n\nconst LineChart: React.FC<{ labels: Array<[string]>, xdata: Array<[number]> }> = ({ labels, xdata }) => {\n\n    const options: ChartOptions = {\n        elements:{\n            point:{\n                radius:0\n            }\n        },\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n        }\n    \n\n    const data: ChartData = {\n        labels: labels,\n        datasets: [\n            { \n                label: 'History',\n                data: xdata.slice(0,50),\n                fill: false,\n                backgroundColor: 'rgb(0, 255, 0)',\n                pointBorderWidth: 0.1,\n                borderWidth: 5,\n                borderColor: 'rgba(0, 255, 0, 0.2)',\n            },\n            {\n                label: 'Predictions',\n                data: xdata,\n                fill: false,\n                pointBorderWidth: 0.1,\n                backgroundColor: 'rgb(152, 255, 152)',\n                borderColor: 'rgba(152, 255, 152, 0.2)',\n            },\n        ],\n    }\n\n    return (\n        <div>\n            <Line data={data} options={options} type={'line'} />\n        </div>\n\n    );\n\n\n}\n\nexport default LineChart;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { csv } from 'd3';\nimport LineChart from './LineChart';\n\nvar S = require('string');\n\nconst row = (d: any) => {\n  d.y_pred = +d.y_pred;\n  d.y_pred_std = +d.y_pred_std;\n  d.aqi = +d.aqi;\n  d.errors = +d.errors;\n  return d;\n};\n\n\nvar xdata: Array<[number]> = [];\nvar xlabels: Array<[string]> = [];\n\nconst App: React.FC = () => {\n\n  const [city, setCity] = useState<string>(\"Katowice\");\n  const [aqi, setAqi] = useState<number>(0);\n\n  const getPredictionData = (city: string) => csv(`https://raw.githubusercontent.com/PrzemyslawSarnacki/AirQualityPrediction/master/data/predictions/history-${city}.csv`, row).then(\n    (data) => {\n\n      data.forEach((row) => xlabels.push(row[\"\"]));\n      data.forEach((row) => xdata.push(row[\"y_pred\"]));\n    }\n  );\n\n  const getHistoricData = (city: string) => csv(`https://raw.githubusercontent.com/PrzemyslawSarnacki/AirQualityPrediction/master/data/predictions/prediction-${city}.csv`, row).then(\n    (data) => {\n      data.forEach((row) => xlabels.push(row[\"\"]));\n      data.forEach((row) => xdata.push(row[\"aqi\"]));\n    }\n  );\n\n  const fetchCity = (city: string) => {\n    const url = `https://api.openaq.org/v1/measurements?city=${city}&parameter=pm25`;\n    fetch(url)\n      .then(\n        function (response) {\n          if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' +\n              response.status);\n            return;\n          }\n\n          response.json().then(function (data) {\n\n            setAqi(data.results[0].value);\n          });\n        }\n      )\n      .catch(function (err) {\n        console.log('Fetch Error :-S', err);\n      });\n\n\n  }\n\n  const stripAccents = (city: string) => {\n    return S(city).latinise().s.toLowerCase()\n  }\n\n  const categorize = () => {\n    if (aqi < 50) {\n      return <p>ðŸ¥³</p>\n    }\n    else if (aqi > 50 && aqi < 100) {\n      return <p>ðŸ˜’</p>\n    }\n    else if (aqi > 100 && aqi < 200){\n      return <p>ðŸ˜¥</p>\n    }\n    else if (aqi > 200){\n      return <p>ðŸ˜°</p>\n    }\n\n\n}\n\n\nuseEffect(() => {\n  xlabels = [];\n  xdata = [];\n  getHistoricData(stripAccents(city));\n  getPredictionData(stripAccents(city));\n  fetchCity(city);\n}, [city]);\n\n\nreturn (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <p>\n        Choose your city\n        </p>\n      </header>\n      <div className=\"App-chart\">\n        <h6>Choose a city:</h6>\n        <select onChange={(option) => setCity(option.target.value)}>\n          <option>Katowice</option>\n          <option>BiaÅ‚ystok</option>\n          <option>Warszawa</option>\n          <option>PoznaÅ„</option>\n          <option>KrakÃ³w</option>\n        </select>\n\n        <LineChart labels={xlabels} xdata={xdata} />\n        <p>Data from within 1 hour:</p>\n        <p>{aqi}</p>\n        {categorize()}\n      </div>\n      <div className=\"App-empty\">\n      </div>\n    </div>\n\n);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}